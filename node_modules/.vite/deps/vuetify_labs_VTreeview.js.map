{
  "version": 3,
  "sources": ["../../vuetify/src/labs/VTreeview/VTreeviewGroup.tsx", "../../vuetify/src/labs/VTreeview/VTreeviewItem.tsx", "../../vuetify/src/labs/VTreeview/shared.ts", "../../vuetify/src/labs/VTreeview/VTreeviewChildren.tsx", "../../vuetify/src/labs/VTreeview/VTreeview.tsx"],
  "sourcesContent": ["// Components\nimport { VDefaultsProvider } from '@/components/VDefaultsProvider'\nimport { makeVListGroupProps, VListGroup } from '@/components/VList/VListGroup'\n\n// Utilities\nimport { computed, ref } from 'vue'\nimport { genericComponent, omit, propsFactory, useRender } from '@/util'\n\n// Types\nimport type { VListGroupSlots } from '@/components/VList/VListGroup'\n\nexport const makeVTreeviewGroupProps = propsFactory({\n  ...omit(makeVListGroupProps({\n    collapseIcon: '$treeviewCollapse',\n    expandIcon: '$treeviewExpand',\n  }), ['subgroup']),\n}, 'VTreeviewGroup')\n\nexport const VTreeviewGroup = genericComponent<VListGroupSlots>()({\n  name: 'VTreeviewGroup',\n\n  props: makeVTreeviewGroupProps(),\n\n  setup (props, { slots }) {\n    const vListGroupRef = ref<VListGroup>()\n    const toggleIcon = computed(() => vListGroupRef.value?.isOpen ? props.collapseIcon : props.expandIcon)\n\n    const activatorDefaults = computed(() => ({\n      VTreeviewItem: {\n        prependIcon: undefined,\n        appendIcon: undefined,\n        active: vListGroupRef.value?.isOpen,\n        toggleIcon: toggleIcon.value,\n      },\n    }))\n\n    useRender(() => {\n      const listGroupProps = VListGroup.filterProps(props)\n\n      return (\n        <VListGroup\n          { ...listGroupProps }\n          ref={ vListGroupRef }\n          class={[\n            'v-treeview-group',\n            props.class,\n          ]}\n          subgroup\n        >\n          {{\n            ...slots,\n            activator: slots.activator ? slotProps => (\n              <>\n                <VDefaultsProvider defaults={ activatorDefaults.value }>\n                  { slots.activator?.(slotProps) }\n                </VDefaultsProvider>\n              </>\n            ) : undefined,\n          }}\n        </VListGroup>\n      )\n    })\n\n    return {}\n  },\n})\n\nexport type VTreeviewGroup = InstanceType<typeof VTreeviewGroup>\n", "// Styles\nimport './VTreeviewItem.sass'\n\n// Components\nimport { VBtn } from '@/components/VBtn'\nimport { VListItemAction, VListItemSubtitle, VListItemTitle } from '@/components/VList'\nimport { makeVListItemProps, VListItem } from '@/components/VList/VListItem'\nimport { VProgressCircular } from '@/components/VProgressCircular'\n\n// Composables\nimport { useDensity } from '@/composables/density'\nimport { IconValue } from '@/composables/icons'\nimport { useNestedItem } from '@/composables/nested/nested'\nimport { useLink } from '@/composables/router'\nimport { genOverlays } from '@/composables/variant'\n\n// Utilities\nimport { computed, inject, ref } from 'vue'\nimport { genericComponent, propsFactory, useRender } from '@/util'\n\n// Types\nimport { VTreeviewSymbol } from './shared'\nimport type { ListItemSlot, VListItemSlots } from '@/components/VList/VListItem'\n\nexport const makeVTreeviewItemProps = propsFactory({\n  loading: Boolean,\n  toggleIcon: IconValue,\n\n  ...makeVListItemProps({ slim: true }),\n}, 'VTreeviewItem')\n\nexport const VTreeviewItem = genericComponent<VListItemSlots>()({\n  name: 'VTreeviewItem',\n\n  props: makeVTreeviewItemProps(),\n\n  setup (props, { attrs, slots, emit }) {\n    const link = useLink(props, attrs)\n    const rawId = computed(() => props.value === undefined ? link.href.value : props.value)\n    const vListItemRef = ref<VListItem>()\n\n    const {\n      activate,\n      isActivated,\n      select,\n      isSelected,\n      isIndeterminate,\n      isGroupActivator,\n      root,\n      id,\n    } = useNestedItem(rawId, false)\n\n    const isActivatableGroupActivator = computed(() =>\n      (root.activatable.value) &&\n      isGroupActivator\n    )\n\n    const { densityClasses } = useDensity(props, 'v-list-item')\n\n    const slotProps = computed(() => ({\n      isActive: isActivated.value,\n      select,\n      isSelected: isSelected.value,\n      isIndeterminate: isIndeterminate.value,\n    } satisfies ListItemSlot))\n\n    const isClickable = computed(() =>\n      !props.disabled &&\n      props.link !== false &&\n      (props.link || link.isClickable.value || (props.value != null && !!vListItemRef.value?.list))\n    )\n\n    function activateItem (e: MouseEvent | KeyboardEvent) {\n      if (\n        !isClickable.value ||\n        (!isActivatableGroupActivator.value && isGroupActivator)\n      ) return\n\n      if (root.activatable.value) {\n        if (isActivatableGroupActivator.value) {\n          activate(!isActivated.value, e)\n        } else {\n          vListItemRef.value?.activate(!vListItemRef.value?.isActivated, e)\n        }\n      }\n    }\n\n    function onKeyDown (e: KeyboardEvent) {\n      if (e.key === 'Enter' || e.key === ' ') {\n        e.preventDefault()\n        activateItem(e)\n      }\n    }\n\n    const visibleIds = inject(VTreeviewSymbol, { visibleIds: ref() }).visibleIds\n\n    useRender(() => {\n      const hasTitle = (slots.title || props.title != null)\n      const hasSubtitle = (slots.subtitle || props.subtitle != null)\n      const listItemProps = VListItem.filterProps(props)\n      const hasPrepend = slots.prepend || props.toggleIcon\n\n      return isActivatableGroupActivator.value\n        ? (\n          <div\n            class={[\n              'v-list-item',\n              'v-list-item--one-line',\n              'v-treeview-item',\n              'v-treeview-item--activetable-group-activator',\n              {\n                'v-list-item--active': isActivated.value || isSelected.value,\n                'v-treeview-item--filtered': visibleIds.value && !visibleIds.value.has(id.value),\n              },\n              densityClasses.value,\n              props.class,\n            ]}\n            onClick={ activateItem }\n            v-ripple={ isClickable.value && props.ripple }\n          >\n            <>\n              { genOverlays(isActivated.value || isSelected.value, 'v-list-item') }\n              { props.toggleIcon && (\n                <VListItemAction start={ false }>\n                  <VBtn\n                    density=\"compact\"\n                    icon={ props.toggleIcon }\n                    loading={ props.loading }\n                    variant=\"text\"\n                    onClick={ props.onClick }\n                  >\n                    {{\n                      loader () {\n                        return (\n                          <VProgressCircular\n                            indeterminate=\"disable-shrink\"\n                            size=\"20\"\n                            width=\"2\"\n                          />\n                        )\n                      },\n                    }}\n                  </VBtn>\n                </VListItemAction>\n              )}\n\n             </>\n\n            <div class=\"v-list-item__content\" data-no-activator=\"\">\n              { hasTitle && (\n                <VListItemTitle key=\"title\">\n                  { slots.title?.({ title: props.title }) ?? props.title }\n                </VListItemTitle>\n              )}\n\n              { hasSubtitle && (\n                <VListItemSubtitle key=\"subtitle\">\n                  { slots.subtitle?.({ subtitle: props.subtitle }) ?? props.subtitle }\n                </VListItemSubtitle>\n              )}\n\n              { slots.default?.(slotProps.value) }\n            </div>\n          </div>\n        ) : (\n        <VListItem\n          ref={ vListItemRef }\n          { ...listItemProps }\n          class={[\n            'v-treeview-item',\n            {\n              'v-treeview-item--filtered': visibleIds.value && !visibleIds.value.has(id.value),\n            },\n            props.class,\n          ]}\n          value={ id.value }\n          onClick={ activateItem }\n          onKeydown={ isClickable.value && onKeyDown }\n        >\n          {{\n            ...slots,\n            prepend: hasPrepend ? slotProps => {\n              return (\n                <>\n                  { props.toggleIcon && (\n                    <VListItemAction start={ false }>\n                      <VBtn\n                        density=\"compact\"\n                        icon={ props.toggleIcon }\n                        loading={ props.loading }\n                        variant=\"text\"\n                      >\n                        {{\n                          loader () {\n                            return (\n                              <VProgressCircular\n                                indeterminate=\"disable-shrink\"\n                                size=\"20\"\n                                width=\"2\"\n                              />\n                            )\n                          },\n                        }}\n                      </VBtn>\n                    </VListItemAction>\n                  )}\n\n                  { slots.prepend?.(slotProps) }\n                </>\n              )\n            } : undefined,\n          }}\n        </VListItem>\n        )\n    })\n\n    return {}\n  },\n})\n\nexport type VTreeviewItem = InstanceType<typeof VTreeviewItem>\n", "// Types\nimport type { ComputedRef, InjectionKey } from 'vue'\n\nexport interface TreeViewProvide {\n  visibleIds: ComputedRef<Set<unknown> | null>\n}\n\nexport const VTreeviewSymbol: InjectionKey<TreeViewProvide> = Symbol.for('vuetify:v-treeview')\n", "// Components\nimport { VTreeviewGroup } from './VTreeviewGroup'\nimport { VTreeviewItem } from './VTreeviewItem'\nimport { VCheckboxBtn } from '@/components/VCheckbox'\n\n// Utilities\nimport { shallowRef, withModifiers } from 'vue'\nimport { genericComponent, propsFactory } from '@/util'\n\n// Types\nimport type { PropType } from 'vue'\nimport type { InternalListItem } from '@/components/VList/VList'\nimport type { VListItemSlots } from '@/components/VList/VListItem'\nimport type { SelectStrategyProp } from '@/composables/nested/nested'\nimport type { GenericProps } from '@/util'\n\nexport type VTreeviewChildrenSlots<T> = {\n  [K in keyof Omit<VListItemSlots, 'default'>]: VListItemSlots[K] & { item: T }\n} & {\n  default: never\n  item: { props: InternalListItem['props'] }\n}\n\nexport const makeVTreeviewChildrenProps = propsFactory({\n  loadChildren: Function as PropType<(item: unknown) => Promise<void>>,\n  loadingIcon: {\n    type: String,\n    default: '$loading',\n  },\n  items: Array as PropType<readonly InternalListItem[]>,\n  selectable: Boolean,\n  selectStrategy: [String, Function, Object] as PropType<SelectStrategyProp>,\n}, 'VTreeviewChildren')\n\nexport const VTreeviewChildren = genericComponent<new <T extends InternalListItem>(\n  props: {\n    items?: readonly T[]\n  },\n  slots: VTreeviewChildrenSlots<T>\n) => GenericProps<typeof props, typeof slots>>()({\n  name: 'VTreeviewChildren',\n\n  props: makeVTreeviewChildrenProps(),\n\n  setup (props, { emit, slots }) {\n    const isLoading = shallowRef(null)\n\n    function checkChildren (item: any) {\n      return new Promise<void>(resolve => {\n        if (!props.items?.length || !props.loadChildren) return resolve()\n\n        if (item?.children?.length === 0) {\n          isLoading.value = item.value\n          props.loadChildren(item).then(resolve)\n\n          return\n        }\n\n        resolve()\n      }).finally(() => {\n        isLoading.value = null\n      })\n    }\n\n    function selectItem (select: (value: boolean) => void, isSelected: boolean) {\n      if (props.selectable) {\n        select(!isSelected)\n      }\n    }\n\n    return () => slots.default?.() ?? props.items?.map(({ children, props: itemProps, raw: item }) => {\n      const loading = isLoading.value === item.value\n      const slotsWithItem = {\n        prepend: slotProps => (\n          <>\n            { props.selectable && (!children || (children && !['leaf', 'single-leaf'].includes(props.selectStrategy as string))) && (\n              <div>\n                <VCheckboxBtn\n                  key={ item.value }\n                  modelValue={ slotProps.isSelected }\n                  loading={ loading }\n                  indeterminate={ slotProps.isIndeterminate }\n                  onClick={ withModifiers(() => selectItem(slotProps.select, slotProps.isSelected), ['stop']) }\n                  onKeydown={ (e: KeyboardEvent) => {\n                    if (!['Enter', 'Space'].includes(e.key)) return\n                    e.stopPropagation()\n                    selectItem(slotProps.select, slotProps.isSelected)\n                  }}\n                />\n              </div>\n            )}\n\n            { slots.prepend?.({ ...slotProps, item }) }\n          </>\n        ),\n        append: slots.append ? slotProps => slots.append?.({ ...slotProps, item }) : undefined,\n        title: slots.title ? slotProps => slots.title?.({ ...slotProps, item }) : undefined,\n      } satisfies VTreeviewItem['$props']['$children']\n\n      const treeviewGroupProps = VTreeviewGroup.filterProps(itemProps)\n      const treeviewChildrenProps = VTreeviewChildren.filterProps(props)\n\n      return children ? (\n        <VTreeviewGroup\n          value={ itemProps?.value }\n          { ...treeviewGroupProps }\n        >\n          {{\n            activator: ({ props: activatorProps }) => {\n              const listItemProps = {\n                ...itemProps,\n                ...activatorProps,\n                value: itemProps?.value,\n              }\n\n              return (\n                <VTreeviewItem\n                  { ...listItemProps }\n                  loading={ loading }\n                  v-slots={ slotsWithItem }\n                  onClick={ () => checkChildren(item) }\n                />\n              )\n            },\n            default: () => (\n              <VTreeviewChildren\n                { ...treeviewChildrenProps }\n                items={ children }\n                v-slots={ slots }\n              />\n            ),\n          }}\n        </VTreeviewGroup>\n      ) : (\n        slots.item?.({ props: itemProps }) ?? (\n          <VTreeviewItem\n            { ...itemProps }\n            v-slots={ slotsWithItem }\n          />\n        ))\n    })\n  },\n})\n", "// Components\nimport { makeVTreeviewChildrenProps, VTreeviewChildren } from './VTreeviewChildren'\nimport { makeVListProps, useListItems, VList } from '@/components/VList/VList'\n\n// Composables\nimport { provideDefaults } from '@/composables/defaults'\nimport { makeFilterProps, useFilter } from '@/composables/filter'\nimport { useProxiedModel } from '@/composables/proxiedModel'\n\n// Utilities\nimport { computed, provide, ref, toRef } from 'vue'\nimport { genericComponent, omit, propsFactory, useRender } from '@/util'\n\n// Types\nimport { VTreeviewSymbol } from './shared'\nimport type { VListChildrenSlots } from '@/components/VList/VListChildren'\nimport type { ListItem } from '@/composables/list-items'\nimport type { GenericProps } from '@/util'\n\nfunction flatten (items: ListItem[], flat: ListItem[] = []) {\n  for (const item of items) {\n    flat.push(item)\n    if (item.children) flatten(item.children, flat)\n  }\n  return flat\n}\n\nexport const makeVTreeviewProps = propsFactory({\n  openAll: Boolean,\n  search: String,\n\n  ...makeFilterProps({ filterKeys: ['title'] }),\n  ...makeVTreeviewChildrenProps(),\n  ...omit(makeVListProps({\n    collapseIcon: '$treeviewCollapse',\n    expandIcon: '$treeviewExpand',\n    slim: true,\n  }), ['nav']),\n}, 'VTreeview')\n\nexport const VTreeview = genericComponent<new <T>(\n  props: {\n    items?: T[]\n  },\n  slots: VListChildrenSlots<T>\n) => GenericProps<typeof props, typeof slots>>()({\n  name: 'VTreeview',\n\n  props: makeVTreeviewProps(),\n\n  emits: {\n    'update:opened': (val: unknown) => true,\n    'update:activated': (val: unknown) => true,\n    'update:selected': (val: unknown) => true,\n    'click:open': (value: { id: unknown, value: boolean, path: unknown[] }) => true,\n    'click:select': (value: { id: unknown, value: boolean, path: unknown[] }) => true,\n  },\n\n  setup (props, { slots }) {\n    const { items } = useListItems(props)\n    const activeColor = toRef(props, 'activeColor')\n    const baseColor = toRef(props, 'baseColor')\n    const color = toRef(props, 'color')\n    const activated = useProxiedModel(props, 'activated')\n    const selected = useProxiedModel(props, 'selected')\n\n    const vListRef = ref<VList>()\n\n    const opened = computed(() => props.openAll ? openAll(items.value) : props.opened)\n    const flatItems = computed(() => flatten(items.value))\n    const search = toRef(props, 'search')\n    const { filteredItems } = useFilter(props, flatItems, search)\n    const visibleIds = computed(() => {\n      if (!search.value) {\n        return null\n      }\n      return new Set(filteredItems.value.flatMap(item => {\n        return [...getPath(item.props.value), ...getChildren(item.props.value)]\n      }))\n    })\n\n    function getPath (id: unknown) {\n      const path: unknown[] = []\n      let parent: unknown = id\n      while (parent != null) {\n        path.unshift(parent)\n        parent = vListRef.value?.parents.get(parent)\n      }\n      return path\n    }\n\n    function getChildren (id: unknown) {\n      const arr: unknown[] = []\n      const queue = ((vListRef.value?.children.get(id) ?? []).slice())\n      while (queue.length) {\n        const child = queue.shift()\n        if (!child) continue\n        arr.push(child)\n        queue.push(...((vListRef.value?.children.get(child) ?? []).slice()))\n      }\n      return arr\n    }\n\n    function openAll (item: any) {\n      let ids: number[] = []\n\n      for (const i of item) {\n        if (!i.children) continue\n\n        ids.push(i.value)\n\n        if (i.children) {\n          ids = ids.concat(openAll(i.children))\n        }\n      }\n\n      return ids\n    }\n\n    provide(VTreeviewSymbol, { visibleIds })\n\n    provideDefaults({\n      VTreeviewGroup: {\n        activeColor,\n        baseColor,\n        color,\n        collapseIcon: toRef(props, 'collapseIcon'),\n        expandIcon: toRef(props, 'expandIcon'),\n      },\n      VTreeviewItem: {\n        activeClass: toRef(props, 'activeClass'),\n        activeColor,\n        baseColor,\n        color,\n        density: toRef(props, 'density'),\n        disabled: toRef(props, 'disabled'),\n        lines: toRef(props, 'lines'),\n        variant: toRef(props, 'variant'),\n      },\n    })\n\n    useRender(() => {\n      const listProps = VList.filterProps(props)\n\n      const treeviewChildrenProps = VTreeviewChildren.filterProps(props)\n\n      return (\n        <VList\n          ref={ vListRef }\n          { ...listProps }\n          class={[\n            'v-treeview',\n            props.class,\n          ]}\n          style={ props.style }\n          opened={ opened.value }\n          v-model:activated={ activated.value }\n          v-model:selected={ selected.value }\n        >\n          <VTreeviewChildren\n            { ...treeviewChildrenProps }\n            items={ items.value }\n            v-slots={ slots }\n          ></VTreeviewChildren>\n        </VList>\n      )\n    })\n\n    return {\n      open,\n    }\n  },\n})\n\nexport type VTreeview = InstanceType<typeof VTreeview>\n"],
  "mappings": "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",
  "names": ["makeVTreeviewGroupProps", "propsFactory", "omit", "makeVListGroupProps", "collapseIcon", "expandIcon", "VTreeviewGroup", "genericComponent", "name", "props", "setup", "_ref", "slots", "vListGroupRef", "ref", "toggleIcon", "computed", "value", "isOpen", "activatorDefaults", "VTreeviewItem", "prependIcon", "undefined", "appendIcon", "active", "useRender", "listGroupProps", "VListGroup", "filterProps", "_createVNode", "_mergeProps", "class", "activator", "slotProps", "_Fragment", "VDefaultsProvider", "default", "VTreeviewSymbol", "Symbol", "for", "makeVTreeviewItemProps", "propsFactory", "loading", "Boolean", "toggleIcon", "IconValue", "makeVListItemProps", "slim", "VTreeviewItem", "genericComponent", "name", "props", "setup", "_ref", "attrs", "slots", "emit", "link", "useLink", "rawId", "computed", "value", "undefined", "href", "vListItemRef", "ref", "activate", "isActivated", "select", "isSelected", "isIndeterminate", "isGroupActivator", "root", "id", "useNestedItem", "isActivatableGroupActivator", "activatable", "densityClasses", "useDensity", "slotProps", "isActive", "isClickable", "disabled", "list", "activateItem", "e", "onKeyDown", "key", "preventDefault", "visibleIds", "inject", "VTreeviewSymbol", "useRender", "hasTitle", "title", "hasSubtitle", "subtitle", "listItemProps", "VListItem", "filterProps", "hasPrepend", "prepend", "_withDirectives", "_createVNode", "has", "class", "_Fragment", "genOverlays", "VListItemAction", "default", "VBtn", "onClick", "loader", "VProgressCircular", "VListItemTitle", "VListItemSubtitle", "_resolveDirective", "ripple", "_mergeProps", "makeVTreeviewChildrenProps", "propsFactory", "loadChildren", "Function", "loadingIcon", "type", "String", "default", "items", "Array", "selectable", "Boolean", "selectStrategy", "Object", "VTreeviewChildren", "genericComponent", "name", "props", "setup", "_ref", "emit", "slots", "isLoading", "shallowRef", "checkChildren", "item", "Promise", "resolve", "length", "children", "value", "then", "finally", "selectItem", "select", "isSelected", "map", "_ref2", "itemProps", "raw", "loading", "slotsWithItem", "prepend", "slotProps", "_createVNode", "_Fragment", "includes", "VCheckboxBtn", "isIndeterminate", "withModifiers", "e", "key", "stopPropagation", "append", "undefined", "title", "treeviewGroupProps", "VTreeviewGroup", "filterProps", "treeviewChildrenProps", "_mergeProps", "activator", "_ref3", "activatorProps", "listItemProps", "VTreeviewItem", "onClick", "flatten", "items", "flat", "arguments", "length", "undefined", "item", "push", "children", "makeVTreeviewProps", "propsFactory", "openAll", "Boolean", "search", "String", "makeFilterProps", "filterKeys", "makeVTreeviewChildrenProps", "omit", "makeVListProps", "collapseIcon", "expandIcon", "slim", "VTreeview", "genericComponent", "name", "props", "emits", "val", "value", "setup", "_ref", "slots", "useListItems", "activeColor", "toRef", "baseColor", "color", "activated", "useProxiedModel", "selected", "vListRef", "ref", "opened", "computed", "flatItems", "filteredItems", "useFilter", "visibleIds", "Set", "flatMap", "getPath", "getChildren", "id", "path", "parent", "unshift", "parents", "get", "arr", "queue", "slice", "child", "shift", "ids", "i", "concat", "provide", "VTreeviewSymbol", "provideDefaults", "VTreeviewGroup", "VTreeviewItem", "activeClass", "density", "disabled", "lines", "variant", "useRender", "listProps", "VList", "filterProps", "treeviewChildrenProps", "VTreeviewChildren", "_createVNode", "_mergeProps", "class", "style", "$event", "default", "open"]
}
